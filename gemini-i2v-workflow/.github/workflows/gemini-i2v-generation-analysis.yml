name: Gemini Image-to-Video Generation & Analysis

on:
  workflow_dispatch:
    inputs:
      base_prompt:
        description: 'Âü∫Êú¨ÁîüÊàê„Éó„É≠„É≥„Éó„Éà'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.branch.outputs.branch-name }}
      folder-name: ${{ steps.branch.outputs.folder-name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || github.token }}
        
    - name: Create branch name
      id: branch
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BRANCH_NAME="gemini-i2v-$TIMESTAMP"
        FOLDER_NAME="video-$TIMESTAMP"
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "folder-name=$FOLDER_NAME" >> $GITHUB_OUTPUT
        
    - name: Create and switch to new branch
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git checkout -b "${{ steps.branch.outputs.branch-name }}"
        git push -u origin "${{ steps.branch.outputs.branch-name }}"

  planning:
    runs-on: ubuntu-latest
    needs: setup-branch
    outputs:
      image-prompt: ${{ steps.verify.outputs.image-prompt }}
      video-prompt: ${{ steps.verify.outputs.video-prompt }}
      planning-completed: ${{ steps.verify.outputs.completed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: üìã „Éó„É≠„É≥„Éó„ÉàË®àÁîª„Ç®„Éº„Ç∏„Çß„É≥„Éà (Gemini)
      id: planning
      uses: google-gemini/gemini-cli-action@main
      with:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        prompt: |
          üìã **„Éó„É≠„É≥„Éó„ÉàË®àÁîª„Çø„Çπ„ÇØ - Gemini Planning „Ç®„Éº„Ç∏„Çß„É≥„Éà**
          
          **Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà**: ${{ github.event.inputs.base_prompt }}
          
          **„Çø„Çπ„ÇØ**: Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà„Åã„ÇâÁîªÂÉèÁîüÊàêÁî®„Å®ÂãïÁîªÁîüÊàêÁî®„ÅÆÊúÄÈÅ©Âåñ„Åï„Çå„Åü„Éó„É≠„É≥„Éó„Éà„Çí‰ΩúÊàê
          
          **ÂÆüË°åÊâãÈ†Ü**:
          1. **„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê**:
             ```bash
             mkdir -p ${{ needs.setup-branch.outputs.folder-name }}/planning
             ```
             
          2. **Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà„ÅÆÂàÜÊûê**:
             - ‰∏ªË¶Å„Å™Ë¶ÅÁ¥†Ôºà„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÄÅ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÄÅË®≠ÂÆö„ÄÅ„Çπ„Çø„Ç§„É´Ôºâ„ÇíÊäΩÂá∫
             - Ë¶ñË¶öÁöÑÁâπÂæ¥„ÇíÊòéÁ¢∫Âåñ
             - Âãï„Åç„ÅÆË¶ÅÁ¥†„ÇíÁâπÂÆö
             
          3. **ÁîªÂÉèÁîüÊàêÁî®„Éó„É≠„É≥„Éó„Éà‰ΩúÊàê**:
             - Imagen4 Fast „Å´ÊúÄÈÅ©Âåñ
             - ÈùôÁöÑ„Å™Ë¶ñË¶öÁöÑË¶ÅÁ¥†„ÇíÂº∑Ë™ø
             - È´òÂìÅË≥™„Å™ÁîªÂÉèÁîüÊàê„Å´ÂøÖË¶Å„Å™Ë©≥Á¥∞„ÇíËøΩÂä†
             - 1Ë°å„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åß‰ΩúÊàê
             
          4. **ÂãïÁîªÁîüÊàêÁî®„Éó„É≠„É≥„Éó„Éà‰ΩúÊàê**:
             - Hailuo-02 Pro „Å´ÊúÄÈÅ©Âåñ
             - Âãï„Åç„ÅÆË¶ÅÁ¥†„ÇíÂº∑Ë™ø
             - ÁîªÂÉè„Åã„ÇâÂãïÁîª„Å∏„ÅÆÂ§âÊèõ„Å´ÈÅ©„Åó„ÅüÊåáÁ§∫
             - 1Ë°å„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åß‰ΩúÊàê
             
          5. **„Éó„É≠„É≥„Éó„Éà‰øùÂ≠ò**:
             ```
             write_file(${{ needs.setup-branch.outputs.folder-name }}/planning/image-prompt.md, ÁîªÂÉèÁîüÊàêÁî®„Éó„É≠„É≥„Éó„Éà)
             write_file(${{ needs.setup-branch.outputs.folder-name }}/planning/video-prompt.md, ÂãïÁîªÁîüÊàêÁî®„Éó„É≠„É≥„Éó„Éà)
             write_file(${{ needs.setup-branch.outputs.folder-name }}/planning/planning-strategy.md, Ë®àÁîªÊà¶Áï•)
             ```
             
          **„Éó„É≠„É≥„Éó„ÉàË¶Å‰ª∂**:
          - ÁîªÂÉè: ÈùôÁöÑ„Å™Áæé„Åó„Åï„ÄÅÊßãÂõ≥„ÄÅËâ≤ÂΩ©„ÄÅË≥™ÊÑü„ÇíÈáçË¶ñ
          - ÂãïÁîª: Ëá™ÁÑ∂„Å™Âãï„Åç„ÄÅÊµÅ„Çå„ÄÅÂ§âÂåñ„ÇíÈáçË¶ñ
          - ‰∏°Êñπ„Å®„ÇÇ50-100Ë™ûÁ®ãÂ∫¶
          - ÊäÄË°ìÁöÑÂìÅË≥™Âêë‰∏ä„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂê´„ÇÄ
          
          **ÈáçË¶Å**: ÂêÑmd„Éï„Ç°„Ç§„É´„ÅØ1Ë°å„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÅÆ„Åø„Åß‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          
    - name: Verify planning results
      id: verify
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        
        # ÁîªÂÉè„Éó„É≠„É≥„Éó„Éà„ÅÆÁ¢∫Ë™ç
        if [ -f "$FOLDER_NAME/planning/image-prompt.md" ]; then
          IMAGE_PROMPT=$(cat "$FOLDER_NAME/planning/image-prompt.md" | tr '\n' ' ')
          echo "‚úÖ Image prompt generated: $IMAGE_PROMPT"
          echo "image-prompt=$IMAGE_PROMPT" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Image prompt file not found"
          exit 1
        fi
        
        # ÂãïÁîª„Éó„É≠„É≥„Éó„Éà„ÅÆÁ¢∫Ë™ç
        if [ -f "$FOLDER_NAME/planning/video-prompt.md" ]; then
          VIDEO_PROMPT=$(cat "$FOLDER_NAME/planning/video-prompt.md" | tr '\n' ' ')
          echo "‚úÖ Video prompt generated: $VIDEO_PROMPT"
          echo "video-prompt=$VIDEO_PROMPT" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Video prompt file not found"
          exit 1
        fi
        
        echo "completed=true" >> $GITHUB_OUTPUT
        
    - name: Commit planning results
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        if git diff --cached --quiet; then
          echo "No planning files to commit"
        else
          git commit -m "üìã Add planning results
          
          Base prompt: ${{ github.event.inputs.base_prompt }}
          Generated at: $(date)
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        fi

  generate-image:
    runs-on: ubuntu-latest
    needs: [setup-branch, planning]
    outputs:
      image-path: ${{ steps.verify.outputs.image-path }}
      image-url: ${{ steps.verify.outputs.image-url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: üñºÔ∏è ÁîªÂÉèÁîüÊàê„Ç®„Éº„Ç∏„Çß„É≥„Éà (Imagen4 Fast)
      id: generate
      uses: google-gemini/gemini-cli-action@main
      with:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        prompt: |
          üñºÔ∏è **ÁîªÂÉèÁîüÊàê„Çø„Çπ„ÇØ**
          
          **„Éó„É≠„É≥„Éó„Éà**: ${{ needs.planning.outputs.image-prompt }}
          
          **ÊâãÈ†Ü**:
          1. „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê: 
             ```bash
             mkdir -p ${{ needs.setup-branch.outputs.folder-name }}/images
             ```
          
          2. **ÈáçË¶Å**: kamuicode„ÅÆÊ≠£„Åó„ÅÑÊâãÈ†Ü„Åßt2i-fal-imagen4-fast„Çí‰ΩøÁî®:
             - `mcp__t2i-fal-imagen4-fast__imagen4_fast_submit` „ÅßÁîªÂÉèÁîüÊàêÈñãÂßã
             - `mcp__t2i-fal-imagen4-fast__imagen4_fast_status` „Åß„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç  
             - `mcp__t2i-fal-imagen4-fast__imagen4_fast_result` „ÅßÁµêÊûúÂèñÂæóÔºàURL„ÅÆ„ÅøÔºâ
          
          3. **ÈáçË¶Å**: MCP„Çµ„Éº„Éê„Éº„Ååcurl„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫„Åô„Çã„Åå„ÄÅ**ÂÆüË°å„ÅØ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ**
             - "Download command: curl -o ..." „ÅØÊèêÊ°à„Åß„ÅÇ„Çä„ÄÅÂÆüË°åÊ∏à„Åø„Åß„ÅØ„Å™„ÅÑ
             - ÂøÖ„ÅöË°®Á§∫„Åï„Çå„Åücurl„Ç≥„Éû„É≥„Éâ„ÇíÂÆüÈöõ„Å´ÂÆüË°å„Åô„Çã„Åì„Å®
          
          4. **„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆüË°å**: 
             - MCP„Çµ„Éº„Éê„Éº„ÅåË°®Á§∫„Åô„Çãcurl„Ç≥„Éû„É≥„Éâ„ÅØÁÑ°Ë¶ñ
             - Áµ∂ÂØæ„Éë„Çπ„Çí‰ΩøÁî®„Åó„Å¶‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å:
             ```bash
             curl -L -o "$(pwd)/${{ needs.setup-branch.outputs.folder-name }}/images/generated-image.jpg" "[result„ÉÑ„Éº„É´„ÅßÂèñÂæó„Åó„ÅüÁîªÂÉèURL]"
             ls -la "$(pwd)/${{ needs.setup-branch.outputs.folder-name }}/images/generated-image.jpg"
             ```
          
          5. **ÁîªÂÉèURL‰øùÂ≠òÔºàÂøÖÈ†àÔºâ**:
             - **ÈáçË¶Å**: ÂèñÂæó„Åó„ÅüÁîªÂÉèURL„ÇíÂøÖ„Åö„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åô„Çã„Åì„Å®:
             ```bash
             echo "[result„ÉÑ„Éº„É´„ÅßÂèñÂæó„Åó„ÅüÁîªÂÉèURL]" > "${{ needs.setup-branch.outputs.folder-name }}/images/image-url.txt"
             cat "${{ needs.setup-branch.outputs.folder-name }}/images/image-url.txt"
             ```
          
          **ÈáçË¶Å**: 
          - MCP„Çµ„Éº„Éê„Éº„ÅØcurl„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫„Åô„Çã„Å†„ÅëÔºàÂÆüË°å„Åó„Å™„ÅÑÔºâ
          - ÂøÖ„ÅöÂÆüÈöõ„Å´curl„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          - „Éï„Ç°„Ç§„É´Âêç„ÅØgenerated-image.jpg„Å´Áµ±‰∏ÄÔºàÊã°ÂºµÂ≠êÊ≥®ÊÑèÔºâ
          
    - name: Verify image generation
      id: verify
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        IMAGE_PATH="$FOLDER_NAME/images/generated-image.jpg"
        IMAGE_URL_FILE="$FOLDER_NAME/images/image-url.txt"
        
        echo "üîç Checking image generation results..."
        echo "Expected image path: $IMAGE_PATH"
        echo "Expected URL file: $IMAGE_URL_FILE"
        
        # „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÅÆÁ¢∫Ë™ç
        echo "Directory structure:"
        ls -la "$FOLDER_NAME/" || echo "Folder not found: $FOLDER_NAME"
        ls -la "$FOLDER_NAME/images/" || echo "Images folder not found"
        
        if [ -f "$IMAGE_PATH" ]; then
          IMAGE_SIZE=$(stat -c%s "$IMAGE_PATH" 2>/dev/null || stat -f%z "$IMAGE_PATH" 2>/dev/null || echo "unknown")
          echo "‚úÖ Image generated successfully: $IMAGE_PATH ($IMAGE_SIZE bytes)"
          echo "image-path=$IMAGE_PATH" >> $GITHUB_OUTPUT
          
          # ÁîªÂÉèURL„ÅÆÁ¢∫Ë™ç„Å®Âá∫ÂäõË®≠ÂÆö
          if [ -f "$IMAGE_URL_FILE" ]; then
            IMAGE_URL=$(cat "$IMAGE_URL_FILE")
            echo "‚úÖ Image URL found: $IMAGE_URL"
            echo "image-url=$IMAGE_URL" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Image URL file not found: $IMAGE_URL_FILE"
            exit 1
          fi
        else
          echo "‚ùå Image not found at expected path: $IMAGE_PATH"
          echo "Available files in images directory:"
          find "$FOLDER_NAME" -type f -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" || echo "No image files found"
          exit 1
        fi
        
    - name: Commit generated image
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        if git diff --cached --quiet; then
          echo "No image files to commit"
        else
          git commit -m "üñºÔ∏è Add generated Imagen4 image
          
          Prompt: ${{ needs.planning.outputs.image-prompt }}
          Generated at: $(date)
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        fi

  generate-video:
    runs-on: ubuntu-latest
    needs: [setup-branch, planning, generate-image]
    outputs:
      video-path: ${{ steps.verify.outputs.video-path }}
      video-url: ${{ steps.verify.outputs.video-url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: üé¨ ÂãïÁîªÁîüÊàê„Ç®„Éº„Ç∏„Çß„É≥„Éà (Hailuo-02 Pro)
      id: generate
      uses: google-gemini/gemini-cli-action@main
      with:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        prompt: |
          üé¨ **ÂãïÁîªÁîüÊàê„Çø„Çπ„ÇØ**
          
          **ÂÖ•ÂäõÁîªÂÉèURL**: ${{ needs.generate-image.outputs.image-url }}
          **ÂãïÁîª„Éó„É≠„É≥„Éó„Éà**: ${{ needs.planning.outputs.video-prompt }}
          
          **ÈáçË¶Å**: ÁîªÂÉèURL„ÅØ‰∏äË®ò„ÅÆ`${{ needs.generate-image.outputs.image-url }}`„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®
          „É≠„Éº„Ç´„É´„Éï„Ç°„Ç§„É´„Éë„ÇπÔºàfile://„ÇÑÁõ∏ÂØæ„Éë„ÇπÔºâ„ÅØ‰ΩøÁî®Á¶ÅÊ≠¢
          
          **ÊâãÈ†Ü**:
          1. „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê:
             ```bash
             mkdir -p ${{ needs.setup-branch.outputs.folder-name }}/videos
             ```
          
          2. **ÈáçË¶Å**: kamuicode„ÅÆÊ≠£„Åó„ÅÑÊâãÈ†Ü„Åßi2v-fal-hailuo-02-pro„Çí‰ΩøÁî®:
             - `mcp__i2v-fal-hailuo-02-pro__hailuo_02_submit` „ÅßÂãïÁîªÁîüÊàêÈñãÂßãÔºàÁîªÂÉèURL„Å®„Åó„Å¶`${{ needs.generate-image.outputs.image-url }}`„Çí‰ΩøÁî®Ôºâ
             - `mcp__i2v-fal-hailuo-02-pro__hailuo_02_status` „Åß„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç
             - `mcp__i2v-fal-hailuo-02-pro__hailuo_02_result` „ÅßÁµêÊûúÂèñÂæó„Å®„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          
          3. **result„ÉÑ„Éº„É´‰ΩøÁî®**: `hailuo_02_result`„ÉÑ„Éº„É´„Åß„É™„ÇØ„Ç®„Çπ„ÉàID„Åã„ÇâÂãïÁîªURL„ÇíÂèñÂæó
             - „É™„ÇØ„Ç®„Çπ„ÉàID„ÅÆ„Åø„Çí‰ΩøÁî®Ôºà‰ªñ„ÅÆ„Éë„É©„É°„Éº„Çø„ÅØ‰∏çË¶ÅÔºâ
             - ÂãïÁîªURL„ÅåËøî„Åï„Çå„ÇãÔºà‰æã: https://v3.fal.media/files/...Ôºâ
          
          4. **ÈáçË¶Å**: MCP„Çµ„Éº„Éê„Éº„Ååcurl„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫„Åô„Çã„Åå„ÄÅ**ÂÆüË°å„ÅØ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ**
             - "Download command: curl -o ..." „ÅØÊèêÊ°à„Åß„ÅÇ„Çä„ÄÅÂÆüË°åÊ∏à„Åø„Åß„ÅØ„Å™„ÅÑ
             - ÂøÖ„ÅöË°®Á§∫„Åï„Çå„Åücurl„Ç≥„Éû„É≥„Éâ„ÇíÂÆüÈöõ„Å´ÂÆüË°å„Åô„Çã„Åì„Å®
          
          5. **„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆüË°å**: 
             - MCP„Çµ„Éº„Éê„Éº„ÅåË°®Á§∫„Åô„Çãcurl„Ç≥„Éû„É≥„Éâ„ÅØÁÑ°Ë¶ñ
             - Áµ∂ÂØæ„Éë„Çπ„Çí‰ΩøÁî®„Åó„Å¶‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å:
             ```bash
             curl -L -o "$(pwd)/${{ needs.setup-branch.outputs.folder-name }}/videos/generated-video.mp4" "[result„ÉÑ„Éº„É´„ÅßÂèñÂæó„Åó„ÅüÂãïÁîªURL]"
             ls -la "$(pwd)/${{ needs.setup-branch.outputs.folder-name }}/videos/generated-video.mp4"
             ```
          
          6. **ÂãïÁîªURL‰øùÂ≠òÔºàÂøÖÈ†àÔºâ**:
             - **ÈáçË¶Å**: ÂèñÂæó„Åó„ÅüÂãïÁîªURL„ÇíÂøÖ„Åö„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åô„Çã„Åì„Å®:
             ```bash
             echo "[result„ÉÑ„Éº„É´„ÅßÂèñÂæó„Åó„ÅüÂãïÁîªURL]" > "${{ needs.setup-branch.outputs.folder-name }}/videos/video-url.txt"
             cat "${{ needs.setup-branch.outputs.folder-name }}/videos/video-url.txt"
             ```
          
          7. „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆå‰∫Ü„ÅÆÁ¢∫Ë™ç„Å®„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Ë°®Á§∫
          
          **ÈáçË¶Å**: 
          - MCP„Çµ„Éº„Éê„Éº„ÅØcurl„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫„Åô„Çã„Å†„ÅëÔºàÂÆüË°å„Åó„Å™„ÅÑÔºâ
          - "‚ö†Ô∏è Important: Execute the above curl command" „ÅÆË≠¶Âëä„Å´Âæì„ÅÜ„Åì„Å®
          - ÂøÖ„ÅöÂÆüÈöõ„Å´curl„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          
    - name: Verify video generation
      id: verify
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        VIDEO_PATH="$FOLDER_NAME/videos/generated-video.mp4"
        VIDEO_URL_FILE="$FOLDER_NAME/videos/video-url.txt"
        
        echo "üîç Checking video generation results..."
        echo "Expected video path: $VIDEO_PATH"
        echo "Expected URL file: $VIDEO_URL_FILE"
        echo "Input image URL was: ${{ needs.generate-image.outputs.image-url }}"
        
        # „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÅÆÁ¢∫Ë™ç
        echo "Directory structure:"
        ls -la "$FOLDER_NAME/" || echo "Folder not found: $FOLDER_NAME"
        ls -la "$FOLDER_NAME/videos/" || echo "Videos folder not found"
        
        if [ -f "$VIDEO_PATH" ]; then
          VIDEO_SIZE=$(stat -c%s "$VIDEO_PATH" 2>/dev/null || stat -f%z "$VIDEO_PATH" 2>/dev/null || echo "unknown")
          echo "‚úÖ Video generated successfully: $VIDEO_PATH ($VIDEO_SIZE bytes)"
          echo "video-path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          
          # ÂãïÁîªURL„ÅÆÁ¢∫Ë™ç„Å®Âá∫ÂäõË®≠ÂÆö
          if [ -f "$VIDEO_URL_FILE" ]; then
            VIDEO_URL=$(cat "$VIDEO_URL_FILE")
            echo "‚úÖ Video URL found: $VIDEO_URL"
            echo "video-url=$VIDEO_URL" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Video URL file not found: $VIDEO_URL_FILE"
            exit 1
          fi
        else
          echo "‚ùå Video not found at expected path: $VIDEO_PATH"
          echo "Available files in videos directory:"
          find "$FOLDER_NAME" -type f -name "*.mp4" -o -name "*.webm" -o -name "*.mov" || echo "No video files found"
          exit 1
        fi
        
    - name: Commit generated video
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        if git diff --cached --quiet; then
          echo "No video files to commit"
        else
          git commit -m "üé¨ Add generated Hailuo-02 video
          
          Prompt: ${{ needs.planning.outputs.video-prompt }}
          Generated at: $(date)
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        fi

  analyze-video:
    runs-on: ubuntu-latest
    needs: [setup-branch, planning, generate-image, generate-video]
    outputs:
      analysis-completed: ${{ steps.analyze-complete.outputs.completed }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: üìä ÂãïÁîªÂàÜÊûê„Ç®„Éº„Ç∏„Çß„É≥„Éà (Gemini Vision)
      id: analyze-video
      uses: google-gemini/gemini-cli-action@main
      with:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        prompt: |
          üìä **ÂãïÁîªÂàÜÊûê„Çø„Çπ„ÇØ - Gemini Vision „Ç®„Éº„Ç∏„Çß„É≥„Éà**
          
          **„Çø„Çπ„ÇØ**: kamuicode„ÅßÁîüÊàê„Åï„Çå„ÅüÂãïÁîª„ÇíË¶ñË¶öÁöÑ„Å´ÂàÜÊûê„Åó„ÄÅÂìÅË≥™Ë©ï‰æ°„ÇíË°å„ÅÜ
          
          **ÂÖ•Âäõ„Éá„Éº„Çø**:
          - **ÂãïÁîªURL**: ${{ needs.generate-video.outputs.video-url }}
          - **ÁîªÂÉèURL**: ${{ needs.generate-image.outputs.image-url }}
          - **Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà**: ${{ github.event.inputs.base_prompt }}
          - **ÁîªÂÉè„Éó„É≠„É≥„Éó„Éà**: ${{ needs.planning.outputs.image-prompt }}
          - **ÂãïÁîª„Éó„É≠„É≥„Éó„Éà**: ${{ needs.planning.outputs.video-prompt }}
          
          **ÈáçË¶Å**: „ÇÇ„ÅóÂãïÁîªURL„ÅåÁ©∫„Åæ„Åü„ÅØ"undefined"„ÅÆÂ†¥Âêà„ÅØ„ÄÅURL„ÅåÊ≠£„Åó„ÅèÊ∏°„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„ÇíÂ†±Âëä„Åó„ÄÅÂèØËÉΩ„Å™ÁØÑÂõ≤„ÅßÂàÜÊûê„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          
          **ÂàÜÊûêÊâãÈ†Ü**:
          1. **„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê**:
             ```bash
             mkdir -p ${{ needs.setup-branch.outputs.folder-name }}/analysis
             ```
             
          2. **ÂãïÁîªURLÁ¢∫Ë™ç**:
             - ÂãïÁîªURL„ÅåÂà©Áî®ÂèØËÉΩ„Åã„ÇíÁ¢∫Ë™ç
             - „ÇÇ„ÅóÂãïÁîªURL„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá∫Âäõ
             - URL„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ„ÄÅGemini Vision API„Åß„Ç¢„ÇØ„Çª„Çπ
             
          3. **Ë¶ñË¶öÁöÑÂìÅË≥™„ÅÆË©ï‰æ°** (1-10ÁÇπ):
             - Êò†ÂÉè„ÅÆ„ÇØ„É™„Ç¢„Åï„ÉªÈÆÆÊòéÂ∫¶
             - Ëâ≤ÂΩ©„ÅÆË±ä„Åã„Åï„Å®Ëá™ÁÑ∂„Åï
             - Âãï„Åç„ÅÆÊªë„Çâ„Åã„Åï
             - ÊßãÂõ≥„Å®„Éï„É¨„Éº„Éü„É≥„Ç∞
             - ÁÖßÊòé„Å®„Ç≥„É≥„Éà„É©„Çπ„Éà
             
          4. **„Éó„É≠„É≥„Éó„ÉàÈÅ©ÂêàÂ∫¶„ÅÆË©ï‰æ°** (1-10ÁÇπ):
             - Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà: "${{ github.event.inputs.base_prompt }}"
             - ÁîªÂÉè„Éó„É≠„É≥„Éó„Éà„Å®„ÅÆ‰∏ÄËá¥Â∫¶Ë©ï‰æ°
             - ÂãïÁîª„Éó„É≠„É≥„Éó„Éà„Å®„ÅÆ‰∏ÄËá¥Â∫¶Ë©ï‰æ°
             - ÂâµÈÄ†ÁöÑ„Å™Ëß£Èáà„ÅÆË≥™
             - ÊúüÂæÖ„Åï„Çå„ÇãÂÜÖÂÆπ„Å®„ÅÆ‰∏ÄËá¥Â∫¶
             
          5. **ÁîªÂÉè„Åã„ÇâÂãïÁîª„Å∏„ÅÆÂ§âÊèõÂìÅË≥™** (1-10ÁÇπ):
             - ÂÖÉÁîªÂÉè„Å®„ÅÆ‰∏ÄË≤´ÊÄß
             - Âãï„Åç„ÅÆËá™ÁÑ∂„Åï„Å®Â¶•ÂΩìÊÄß
             - Â§âÊèõ„ÅÆÊªë„Çâ„Åã„Åï
             - ÁîªÂÉè„ÅÆË¶ÅÁ¥†„ÅÆ‰øùÊåÅÂ∫¶
             
          6. **ÊäÄË°ìÁöÑÂìÅË≥™„ÅÆË©ï‰æ°** (1-10ÁÇπ):
             - ÂãïÁîª„ÅÆÂÆâÂÆöÊÄßÔºàÊâã„Å∂„ÇåÁ≠âÔºâ
             - „Éï„É¨„Éº„É†Èñì„ÅÆÈÄ£Á∂öÊÄß
             - „Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„ÅÆÊúâÁÑ°
             - ÂÖ®‰ΩìÁöÑ„Å™Âà∂‰ΩúÂìÅË≥™
             
          7. **Á∑èÂêàË©ï‰æ°„Å®„É¨„Éù„Éº„Éà‰ΩúÊàê**:
             - Á∑èÂêà„Çπ„Ç≥„Ç¢ÔºàÂêÑÈ†ÖÁõÆ„ÅÆÂπ≥ÂùáÔºâ
             - ÂÑ™„Çå„Å¶„ÅÑ„ÇãÁÇπ„ÅÆÁÆáÊù°Êõ∏„Åç
             - ÊîπÂñÑÂèØËÉΩ„Å™ÁÇπ„ÅÆÁÆáÊù°Êõ∏„Åç
             - Êé®Â•®„Åï„Çå„ÇãÁî®ÈÄî
             
          8. **ÂàÜÊûêÁµêÊûú„ÅÆ‰øùÂ≠ò**:
             ```
             write_file(${{ needs.setup-branch.outputs.folder-name }}/analysis/video-analysis.md, Ë©≥Á¥∞„Å™ÂàÜÊûê„É¨„Éù„Éº„Éà)
             ```
             
          **ÈáçË¶Å**: 
          - Gemini Vision API„Çí‰ΩøÁî®„Åó„Å¶ÂãïÁîªURL„Åã„ÇâÁõ¥Êé•Ë¶ñË¶öÁöÑÂÜÖÂÆπ„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          - ÂÖ∑‰ΩìÁöÑ„Å™Êò†ÂÉèÂÜÖÂÆπ„Å´„Å§„ÅÑ„Å¶Ë©≥Á¥∞„Å´„Ç≥„É°„É≥„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          - „Éó„É≠„ÅÆÊò†ÂÉèË©ï‰æ°ËÄÖ„ÅÆË¶≥ÁÇπ„Åã„ÇâÂÆ¢Ë¶≥ÁöÑ„Å´Ë©ï‰æ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          
    - name: Mark analysis complete
      id: analyze-complete
      run: |
        echo "completed=true" >> $GITHUB_OUTPUT
        
    - name: Commit analysis results
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        if git diff --cached --quiet; then
          echo "No analysis files to commit"
        else
          git commit -m "üìä Add video analysis results
          
          Analyzed at: $(date)
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        fi

  create-summary:
    runs-on: ubuntu-latest
    needs: [setup-branch, generate-video, analyze-video]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup-branch.outputs.branch-name }}
        
    - name: Create summary
      run: |
        FOLDER_NAME="${{ needs.setup-branch.outputs.folder-name }}"
        cat > "$FOLDER_NAME/README.md" << EOF
        # Gemini Image-to-Video Generation & Analysis Results
        
        ## Overview
        - **Base Prompt**: ${{ github.event.inputs.base_prompt }}
        - **Generated At**: $(date)
        - **Branch**: ${{ needs.setup-branch.outputs.branch-name }}
        
        ## Generated Content
        - **Planning**: \`planning/\` directory
        - **Image**: \`images/generated-image.jpg\`
        - **Video**: \`videos/generated-video.mp4\`
        - **Analysis**: \`analysis/video-analysis.md\`
        
        ## Generation Pipeline
        1. ‚úÖ Planning: Image & Video prompt optimization
        2. ‚úÖ Image Generation: Imagen4 Fast
        3. ‚úÖ Video Generation: Hailuo-02 Pro (I2V)
        4. ‚úÖ Video Analysis: Gemini Vision
        
        ---
        ü§ñ Generated with [Claude Code](https://claude.ai/code)
        EOF
        
    - name: Commit summary
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        if git diff --cached --quiet; then
          echo "No summary files to commit"
        else
          git commit -m "üìù Add workflow summary
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        fi

  create-pull-request:
    runs-on: ubuntu-latest
    needs: [setup-branch, create-summary]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || github.token }}
        
    - name: Create Pull Request
      run: |
        gh pr create \
          --title "üé¨ I2V Generation: ${{ github.event.inputs.base_prompt }}" \
          --body "$(cat <<'EOF'
        ## Summary
        Generated image and video using a 2-stage pipeline with the following base prompt:
        **${{ github.event.inputs.base_prompt }}**
        
        ## Generation Pipeline
        1. üìã **Planning**: Gemini optimized prompts for each stage
        2. üñºÔ∏è **Image**: Imagen4 Fast generation
        3. üé¨ **Video**: Hailuo-02 Pro I2V conversion
        4. üìä **Analysis**: Gemini Vision evaluation
        
        ## Generated Files
        - üìã Planning: `planning/` directory with optimized prompts
        - üñºÔ∏è Image: `images/generated-image.jpg`
        - üé¨ Video: `videos/generated-video.mp4`
        - üìä Analysis: `analysis/video-analysis.md`
        - üìù Summary: `README.md`
        
        ## Workflow Status
        - ‚úÖ Planning: Completed with Gemini
        - ‚úÖ Image Generation: Completed with Imagen4 Fast
        - ‚úÖ Video Generation: Completed with Hailuo-02 Pro
        - ‚úÖ Video Analysis: Completed with Gemini Vision
        
        ü§ñ Generated with [Claude Code](https://claude.ai/code)
        EOF
        )" \
          --head "${{ needs.setup-branch.outputs.branch-name }}" \
          --base main
      env:
        GH_TOKEN: ${{ secrets.PAT_TOKEN || github.token }}